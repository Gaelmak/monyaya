// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String      @id @default(cuid())
  name           String      @unique
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  firstName      String?
  lastName       String?
  phoneNumber    String?
  createdAt      DateTime    @default(now())
  password       String?
  salt           String?
  bio            String?
  municipality   String?
  district       String?
  avenue         String?
  number         String?
  paymentNumber  String?
  terms_accepted Boolean?    @default(false)
  role           Role        @default(USER)
  accounts       Account[]
  sessions       Session[]
  trainings      Trainings[]
  learners       Learners[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id      String    @id @default(cuid())
  name    String
  courses Courses[]
}

model Courses {
  id         String      @id @default(cuid())
  name       String
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  trainings  Trainings[]
}

model Trainings {
  id          String     @id @default(cuid())
  name        String
  image       String?
  description String
  userId      String
  price       Float
  coursesId   String
  createdAt   DateTime   @default(now())
  modules     Modules[]
  learners    Learners[]
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  courses     Courses    @relation(fields: [coursesId], references: [id], onDelete: Cascade)
}

model Learners {
  id         String    @id @default(cuid())
  trainingId String
  userId     String
  status     Status    @default(PENDING)
  createdAt  DateTime  @default(now())
  training   Trainings @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Modules {
  id          String    @id @default(cuid())
  title       String
  description String
  trainingId  String
  trainings   Trainings @relation(fields: [trainingId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  TRAINER
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}
