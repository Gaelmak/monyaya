// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String      @id @default(cuid())
  name                   String      @unique
  email                  String?     @unique
  emailVerified          DateTime?
  image                  String?
  firstName              String?
  lastName               String?
  phoneNumber            String?
  createdAt              DateTime    @default(now())
  password               String?
  salt                   String?
  bio                    String?
  municipality           String?
  district               String?
  avenue                 String?
  number                 String?
  paymentNumber          String?
  terms_accepted         Boolean?    @default(false)
  role                   Role        @default(USER)
  isTrainerValidated     Boolean?    @default(false)
  accounts               Account[]
  sessions               Session[]

  yaya                   Yaya?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Yaya {
  id         String       @id @default(cuid())
  userId     String       @unique
  status     Status       @default(PENDING)
  createdAt  DateTime     @default(now())
  approvedAt DateTime?
  user       User         @relation(fields: [userId], references: [id])

  courses    Courses[]
}

model Courses {
  id            String      @id @default(cuid())
  yayaID        String
  type          CourseType
  status        Status
  title         String
  description   String
  cover         String?
  videoUrl      String?
  monthlyPrice  Float
  createAt      DateTime    @default(now())
  valideAt      DateTime?
  categoryId    String?
  
  category      Category?   @relation(fields: [categoryId], references: [id])
  yaya          Yaya?       @relation(fields: [yayaID], references: [id])
}

model Category {
  id      String    @id @default(cuid())
  name    String
  courses Courses[]
}

model Modules {
  id          String    @id @default(cuid())
  title       String
  description String
  trainingId  String
}

enum Role {
  USER
  TRAINER
  ADMIN
}

enum Status {
  PENDING
  APPROVED
  REJECTED
  ARCHIVED
}

enum CourseType {
  ONLINE
  DOMICILE
  ONSITE
}
